--------------------------------------------------------
--  File created - Thursday-January-18-2018   
--------------------------------------------------------
--------------------------------------------------------
--  DDL for Table CONNECTION_MASTER
--------------------------------------------------------

  CREATE TABLE "APPUSER"."CONNECTION_MASTER" 
   (	"ID" NUMBER GENERATED ALWAYS AS IDENTITY MINVALUE 1 MAXVALUE 9999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE , 
	"CONNECTIONNAME" VARCHAR2(200 BYTE), 
	"PROJECTID" NUMBER, 
	"SID" VARCHAR2(200 BYTE), 
	"IPADDRESS" VARCHAR2(200 BYTE), 
	"PORTNUMBER" NUMBER, 
	"USERNAME" VARCHAR2(200 BYTE), 
	"PASSWORD" VARCHAR2(200 BYTE), 
	"CREATEDBY" NUMBER, 
	"CREATEDON" DATE, 
	"MODIFIEDBY" NUMBER, 
	"MODIFIEDON" DATE, 
	"DELETEDBY" NUMBER, 
	"DELETEDON" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table EMPLOYEE
--------------------------------------------------------

  CREATE TABLE "APPUSER"."EMPLOYEE" 
   (	"ID" NUMBER, 
	"EMPLOYEENUMBER" VARCHAR2(200 BYTE), 
	"PFINDEXNO" VARCHAR2(200 BYTE), 
	"PRESENTESG" VARCHAR2(500 BYTE), 
	"ESGTEXT" VARCHAR2(1000 BYTE), 
	"NAME" VARCHAR2(500 BYTE), 
	"EMAILID" VARCHAR2(500 BYTE), 
	"DOB" DATE, 
	"BRANCHID" NUMBER, 
	"POSITIONID" NUMBER, 
	"SCALEID" NUMBER, 
	"ROLEID" NUMBER, 
	"SPOUSEEMPNUMBER" VARCHAR2(500 BYTE), 
	"MODIFIEDBY" NUMBER, 
	"MODIFIEDON" DATE, 
	"GENDER" VARCHAR2(400 BYTE), 
	"DOMICILEPLACE" VARCHAR2(1000 BYTE), 
	"APPOINTMENTDATE" DATE, 
	"JOINEDASEG" VARCHAR2(1000 BYTE), 
	"OFFICERPROMOTIONDATE" DATE, 
	"EGCODE" VARCHAR2(10 BYTE), 
	"EGTEXT" VARCHAR2(2000 BYTE), 
	"ESGCODE" VARCHAR2(10 BYTE), 
	"PROMOTIONDATESINCEESG" DATE, 
	"POSITIONCODE" VARCHAR2(10 BYTE), 
	"POSITIONTEXT" VARCHAR2(2000 BYTE), 
	"ORGCODE" VARCHAR2(10 BYTE), 
	"ORGTEXT" VARCHAR2(2000 BYTE), 
	"PACODE" VARCHAR2(10 BYTE), 
	"PATEXT" VARCHAR2(2000 BYTE), 
	"PSACODE" VARCHAR2(10 BYTE), 
	"PSATEXT" VARCHAR2(2000 BYTE), 
	"RA1EMPCODE" VARCHAR2(10 BYTE), 
	"PHONENUMBER" VARCHAR2(100 BYTE), 
	"EMPLOYEESTATUS" VARCHAR2(100 BYTE), 
	"ISPHYSICALCHALLENGED" VARCHAR2(2 BYTE), 
	"ISSPORTSPERSON" VARCHAR2(2 BYTE), 
	"SALUTATION" VARCHAR2(400 BYTE), 
	"REPORTINGPFINDEX" NUMBER, 
	"CIRCLEID" NUMBER, 
	"NETWORKID" NUMBER, 
	"MODULEID" NUMBER, 
	"REGIONID" NUMBER, 
	"CENTERID" NUMBER, 
	"DEPARTMENTID" NUMBER, 
	"DEPTROLEID" NUMBER, 
	"PAYROLLAREA" VARCHAR2(200 BYTE), 
	"PAYROLLAREATEXT" VARCHAR2(200 BYTE), 
	"MARITALSTATUS" VARCHAR2(200 BYTE), 
	"EGSINCEDATE" DATE, 
	"ESGSINCEDATE" DATE, 
	"SCALE1PROMOTIONDATE" DATE, 
	"SCALE2PROMOTIONDATE" DATE, 
	"SCALE3PROMOTIONDATE" DATE, 
	"SCALE4PROMOTIONDATE" DATE, 
	"SCALE5PROMOTIONDATE" DATE, 
	"SCALE6PROMOTIONDATE" DATE, 
	"SCALE7PROMOTIONDATE" DATE, 
	"SCALECHANGEDON" DATE, 
	"PREVIOUSSCALEID" NUMBER, 
	"EGCHANGEDON" DATE, 
	"PREVIOUSEGCODE" VARCHAR2(20 BYTE), 
	"PREVIOUSEGTEXT" VARCHAR2(200 BYTE), 
	"ISSEPARATED" NUMBER DEFAULT 2, 
	"AGE" NUMBER, 
	"ISDELETEDFROMTRANSPOOL" NUMBER, 
	"DELETEDFROMTRANSPOOLBY" NUMBER, 
	"DELETEDFROMTRANSPOOLON" DATE, 
	"DELETEFROMTRANSPOOLREASON" VARCHAR2(4000 BYTE), 
	"ISCREDITJOBFAMILY" NUMBER, 
	"SEPARATEDDATE" DATE, 
	"ISIBO" NUMBER DEFAULT 0, 
	"IBODATE" DATE, 
	"FYE_AGE" NUMBER, 
	"WILLRETIRE" NUMBER, 
	"JOBFAMILY" NUMBER, 
	"IS_RECENTLY_TRANSFERED" NUMBER, 
	"PROMOTION_TO_SCALEID" NUMBER DEFAULT 0, 
	"PROMOTION_TO_SCALE" VARCHAR2(200 BYTE), 
	"PROMOTIONDATE" DATE, 
	"SURVEYSTATUS" NUMBER, 
	"PREVIOUS_SCALEID_FOR_VAC" NUMBER, 
	"ISBRANCHCHANGED" NUMBER DEFAULT 0, 
	"ISPOSITIONCHANGED" NUMBER DEFAULT 0
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table ERRORLOG
--------------------------------------------------------

  CREATE TABLE "APPUSER"."ERRORLOG" 
   (	"ID" NUMBER GENERATED ALWAYS AS IDENTITY MINVALUE 1 MAXVALUE 9999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE , 
	"SPNAME" VARCHAR2(500 BYTE), 
	"ERRORMESSAGE" VARCHAR2(4000 BYTE), 
	"ERRORCODE" VARCHAR2(500 BYTE), 
	"CREATEDON" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table PROJECT_MAPPING
--------------------------------------------------------

  CREATE TABLE "APPUSER"."PROJECT_MAPPING" 
   (	"ID" NUMBER GENERATED ALWAYS AS IDENTITY MINVALUE 1 MAXVALUE 9999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE , 
	"PFINDEXNO" NUMBER, 
	"PROJECTID" NUMBER, 
	"CREATEDBY" NUMBER, 
	"CREATEDON" DATE, 
	"MODIFIEDBY" NUMBER, 
	"MODIFIEDON" DATE, 
	"DELETEDBY" NUMBER, 
	"DELETEDON" DATE, 
	"ISPROJECTADMIN" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table PROJECT_MASTER
--------------------------------------------------------

  CREATE TABLE "APPUSER"."PROJECT_MASTER" 
   (	"ID" NUMBER GENERATED ALWAYS AS IDENTITY MINVALUE 1 MAXVALUE 9999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE , 
	"PROJECTNAME" VARCHAR2(200 BYTE), 
	"PROJECTDESCRIPTION" VARCHAR2(2000 BYTE), 
	"ISACTIVE" NUMBER, 
	"CREATEDBY" NUMBER, 
	"CREATEDON" DATE, 
	"MODIFIEDBY" NUMBER, 
	"MODIFIEDON" DATE, 
	"DELETEDBY" NUMBER, 
	"DELETEDON" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table REPORT_MAPPING
--------------------------------------------------------

  CREATE TABLE "APPUSER"."REPORT_MAPPING" 
   (	"ID" NUMBER GENERATED ALWAYS AS IDENTITY MINVALUE 1 MAXVALUE 9999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE , 
	"REPORTID" NUMBER, 
	"PFINDEXNO" NUMBER, 
	"CREATEDBY" NUMBER, 
	"CREATEDON" DATE, 
	"MODIFIEDBY" NUMBER, 
	"MODIFIEDON" DATE, 
	"DELETEDBY" NUMBER, 
	"DELETEDON" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table REPORT_MASTER
--------------------------------------------------------

  CREATE TABLE "APPUSER"."REPORT_MASTER" 
   (	"ID" NUMBER GENERATED ALWAYS AS IDENTITY MINVALUE 1 MAXVALUE 9999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE , 
	"REPORTNAME" VARCHAR2(2000 BYTE), 
	"REPORTDESCRIPTION" VARCHAR2(2000 BYTE), 
	"PROCEDURENAME" VARCHAR2(2000 BYTE), 
	"CREATEDBY" NUMBER, 
	"CREATEDON" DATE, 
	"MODIFIEDBY" NUMBER, 
	"MODIFIEDON" DATE, 
	"DELETEDBY" NUMBER, 
	"DELETEDON" DATE, 
	"PROJECTID" NUMBER, 
	"CONNECTIONID" NUMBER, 
	"ISACTIVE" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table ROLE_MASTER
--------------------------------------------------------

  CREATE TABLE "APPUSER"."ROLE_MASTER" 
   (	"ID" NUMBER GENERATED ALWAYS AS IDENTITY MINVALUE 1 MAXVALUE 9999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE , 
	"ROLENAME" VARCHAR2(200 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table USER_MASTER
--------------------------------------------------------

  CREATE TABLE "APPUSER"."USER_MASTER" 
   (	"ID" NUMBER GENERATED ALWAYS AS IDENTITY MINVALUE 1 MAXVALUE 9999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE , 
	"PFINDEXNO" NUMBER, 
	"NAME" VARCHAR2(200 BYTE), 
	"EMAIL" VARCHAR2(200 BYTE), 
	"DESIGNATION" VARCHAR2(200 BYTE), 
	"CREATEDBY" NUMBER, 
	"CREATEDON" DATE, 
	"MODIFIEDBY" NUMBER, 
	"MODIFIEDON" DATE, 
	"DELETEDBY" NUMBER, 
	"DELETEDON" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table USER_ROLE
--------------------------------------------------------

  CREATE TABLE "APPUSER"."USER_ROLE" 
   (	"ID" NUMBER GENERATED ALWAYS AS IDENTITY MINVALUE 1 MAXVALUE 9999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE , 
	"PFINDEXNO" NUMBER, 
	"ROLEID" NUMBER, 
	"CREATEDBY" NUMBER, 
	"CREATEDON" DATE, 
	"MODIFIEDBY" NUMBER, 
	"MODIFIEDON" DATE, 
	"DELETEDBY" NUMBER, 
	"DELETEDON" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
-- Unable to render SEQUENCE DDL for object APPUSER.ISEQ$$_92025 with DBMS_METADATA attempting internal generator.
CREATE SEQUENCE ISEQ$$_92025 INCREMENT BY 1 MAXVALUE 9999999999 MINVALUE 1 CACHE 20
-- Unable to render SEQUENCE DDL for object APPUSER.ISEQ$$_92029 with DBMS_METADATA attempting internal generator.
CREATE SEQUENCE ISEQ$$_92029 INCREMENT BY 1 MAXVALUE 9999999999 MINVALUE 1 CACHE 20
-- Unable to render SEQUENCE DDL for object APPUSER.ISEQ$$_92033 with DBMS_METADATA attempting internal generator.
CREATE SEQUENCE ISEQ$$_92033 INCREMENT BY 1 MAXVALUE 9999999999 MINVALUE 1 CACHE 20
-- Unable to render SEQUENCE DDL for object APPUSER.ISEQ$$_92037 with DBMS_METADATA attempting internal generator.
CREATE SEQUENCE ISEQ$$_92037 INCREMENT BY 1 MAXVALUE 9999999999 MINVALUE 1 CACHE 20
-- Unable to render SEQUENCE DDL for object APPUSER.ISEQ$$_92041 with DBMS_METADATA attempting internal generator.
CREATE SEQUENCE ISEQ$$_92041 INCREMENT BY 1 MAXVALUE 9999999999 MINVALUE 1 CACHE 20
-- Unable to render SEQUENCE DDL for object APPUSER.ISEQ$$_92045 with DBMS_METADATA attempting internal generator.
CREATE SEQUENCE ISEQ$$_92045 INCREMENT BY 1 MAXVALUE 9999999999 MINVALUE 1 CACHE 20
-- Unable to render SEQUENCE DDL for object APPUSER.ISEQ$$_92049 with DBMS_METADATA attempting internal generator.
CREATE SEQUENCE ISEQ$$_92049 INCREMENT BY 1 MAXVALUE 9999999999 MINVALUE 1 CACHE 20
-- Unable to render SEQUENCE DDL for object APPUSER.ISEQ$$_92053 with DBMS_METADATA attempting internal generator.
CREATE SEQUENCE ISEQ$$_92053 INCREMENT BY 1 MAXVALUE 9999999999 MINVALUE 1 CACHE 20
-- Unable to render SEQUENCE DDL for object APPUSER.ISEQ$$_92056 with DBMS_METADATA attempting internal generator.
CREATE SEQUENCE ISEQ$$_92056 INCREMENT BY 1 MAXVALUE 123456789 MINVALUE 1 CACHE 20
-- Unable to render SEQUENCE DDL for object APPUSER.ISEQ$$_92058 with DBMS_METADATA attempting internal generator.
CREATE SEQUENCE ISEQ$$_92058 INCREMENT BY 1 MAXVALUE 9999999999 MINVALUE 1 CACHE 20
-- Unable to render SEQUENCE DDL for object APPUSER.ISEQ$$_92153 with DBMS_METADATA attempting internal generator.
CREATE SEQUENCE ISEQ$$_92153 INCREMENT BY 1 MAXVALUE 9999999999 MINVALUE 1 CACHE 20
--------------------------------------------------------
--  DDL for Procedure ADD_EDIT_CONNECTION
--------------------------------------------------------
set define off;

  CREATE OR REPLACE  PROCEDURE "APPUSER"."ADD_EDIT_CONNECTION" 
(
    P_ID IN NUMBER,
    P_NAME IN VARCHAR2,
    P_PROJECTID IN NUMBER,
    P_SID IN VARCHAR2,
    P_IPADDRESS IN VARCHAR2,
    P_PORTNUMBER IN NUMBER,
    P_USERNAME IN VARCHAR2,
    P_PASSWORD IN VARCHAR2,
    P_CREATEDBY IN VARCHAR2,
    P_MODIFIEDBY IN VARCHAR2,
    OPERATIONSTATUS OUT INTEGER,
    OPERATIONLOGID OUT INTEGER,
    OPERATIONMESSAGE OUT VARCHAR2
)
AS
ERR_CODE VARCHAR2(500);
ERR_MSG VARCHAR2(4000);
P_STATUS NUMBER :=0;
  BEGIN
    MERGE INTO CONNECTION_MASTER D
    USING (SELECT P_ID AS ID FROM DUAL) S ON ( S.ID=D.ID )
    WHEN MATCHED THEN 
      UPDATE 
      SET CONNECTIONNAME=P_NAME, 
      PROJECTID=P_PROJECTID, 
      SID=P_SID, 
      IPADDRESS=P_IPADDRESS, 
      PORTNUMBER=P_PORTNUMBER, 
      USERNAME=P_USERNAME, 
      PASSWORD=P_PASSWORD, 
      MODIFIEDBY=P_MODIFIEDBY, 
      MODIFIEDON=SYSDATE
    WHEN NOT MATCHED THEN 
      INSERT 
      (
        CONNECTIONNAME, 
        PROJECTID, 
        SID, 
        IPADDRESS, 
        PORTNUMBER,
        USERNAME,
        PASSWORD,
        CREATEDBY,
        CREATEDON
      )
      VALUES 
      (
        P_NAME,
        P_PROJECTID,
        P_SID,
        P_IPADDRESS,
        P_PORTNUMBER,
        P_USERNAME,
        P_PASSWORD,
        P_CREATEDBY,
        SYSDATE
      ) ;
    
    IF(P_ID=0) THEN
      SELECT MAX(ID) INTO P_STATUS FROM CONNECTION_MASTER;
    ELSE 
      P_STATUS:=P_ID;
    END IF;
    
  COMMIT;
  OPERATIONSTATUS := 1;
  OPERATIONLOGID := P_STATUS;
  OPERATIONMESSAGE:='Success.';
  EXCEPTION 
      WHEN OTHERS THEN
      ROLLBACK;
      ERR_CODE := SQLCODE;
      ERR_MSG := SUBSTR(SQLERRM, 1, 4000);
      INSERT INTO ERRORLOG (ERRORCODE, ERRORMESSAGE, SPNAME, CREATEDON)
      VALUES (ERR_CODE, ERR_MSG,'ADD_EDIT_CONNECTION',SYSDATE);
      COMMIT;
END ADD_EDIT_CONNECTION;

/
--------------------------------------------------------
--  DDL for Procedure ADD_EDIT_PROJECT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE  PROCEDURE "APPUSER"."ADD_EDIT_PROJECT" 
(
    P_ID IN NUMBER,
    P_NAME IN VARCHAR2,
    P_DESCRIPTION IN VARCHAR2,
    P_MODIFIEDBY IN NUMBER,
    OPERATIONSTATUS OUT INTEGER,
    OPERATIONLOGID OUT INTEGER,
    OPERATIONMESSAGE OUT VARCHAR2
)
AS
ERR_CODE VARCHAR2(500);
ERR_MSG VARCHAR2(4000);
P_STATUS NUMBER :=0;
  BEGIN
    MERGE INTO PROJECT_MASTER D
    USING (SELECT P_ID AS ID FROM DUAL) S ON ( S.ID=D.ID )
    WHEN MATCHED THEN 
      UPDATE 
      SET PROJECTNAME=P_NAME, PROJECTDESCRIPTION=P_DESCRIPTION, MODIFIEDBY=P_MODIFIEDBY, MODIFIEDON=SYSDATE
    WHEN NOT MATCHED THEN 
      INSERT (PROJECTNAME, PROJECTDESCRIPTION, ISACTIVE, CREATEDBY, CREATEDON) 
      VALUES (P_NAME,P_DESCRIPTION,1,P_MODIFIEDBY, SYSDATE) ;
    
    IF(P_ID=0) THEN
      SELECT MAX(ID) INTO P_STATUS FROM PROJECT_MASTER;
      ELSE 
      P_STATUS:=P_ID;
    END IF;
    
  COMMIT;
  OPERATIONSTATUS := 1;
  OPERATIONLOGID := P_STATUS;
  OPERATIONMESSAGE:='Project Updated Successfully.';
  EXCEPTION 
      WHEN OTHERS THEN
      ROLLBACK;
      ERR_CODE := SQLCODE;
      ERR_MSG := SUBSTR(SQLERRM, 1, 4000);
      INSERT INTO ERRORLOG (ERRORCODE, ERRORMESSAGE, SPNAME, CREATEDON)
      VALUES (ERR_CODE, ERR_MSG,'ADD_EDIT_PROJECT',SYSDATE);
      COMMIT;
END ADD_EDIT_PROJECT;

/
--------------------------------------------------------
--  DDL for Procedure ADD_EDIT_REPORT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE  PROCEDURE "APPUSER"."ADD_EDIT_REPORT" 
(
    P_ID IN NUMBER,
    P_NAME IN VARCHAR2,
    P_DESCRIPTION IN VARCHAR2,
    P_PROCEDURE IN VARCHAR2,
    P_PROJECTID IN NUMBER,
    P_CONNECTIONID IN NUMBER,
    P_MODIFIEDBY IN NUMBER,
    OPERATIONSTATUS OUT INTEGER,
    OPERATIONLOGID OUT INTEGER,
    OPERATIONMESSAGE OUT VARCHAR2
)
AS
ERR_CODE VARCHAR2(500);
ERR_MSG VARCHAR2(4000);
P_STATUS NUMBER :=0;
  BEGIN
    MERGE INTO REPORT_MASTER D
    USING (SELECT P_ID AS ID FROM DUAL) S ON ( S.ID=D.ID )
    WHEN MATCHED THEN 
      UPDATE 
      SET REPORTNAME=P_NAME, REPORTDESCRIPTION=P_DESCRIPTION,
      PROCEDURENAME=P_PROCEDURE,PROJECTID =P_PROJECTID,CONNECTIONID=P_CONNECTIONID,
      MODIFIEDBY=P_MODIFIEDBY, MODIFIEDON=SYSDATE
    WHEN NOT MATCHED THEN 
      INSERT (REPORTNAME, REPORTDESCRIPTION,PROCEDURENAME,PROJECTID,CONNECTIONID, ISACTIVE, CREATEDBY, CREATEDON) 
      VALUES (P_NAME,P_DESCRIPTION,P_PROCEDURE,P_PROJECTID,P_CONNECTIONID, 1,P_MODIFIEDBY, SYSDATE) ;
    
    IF(P_ID=0) THEN
      SELECT MAX(ID) INTO P_STATUS FROM REPORT_MASTER;
      ELSE 
      P_STATUS:=P_ID;
    END IF;
    
  COMMIT;
  OPERATIONSTATUS := 1;
  OPERATIONLOGID := P_STATUS;
  OPERATIONMESSAGE:='Report Updated Successfully.';
  EXCEPTION 
      WHEN OTHERS THEN
      ROLLBACK;
      ERR_CODE := SQLCODE;
      ERR_MSG := SUBSTR(SQLERRM, 1, 4000);
      INSERT INTO ERRORLOG (ERRORCODE, ERRORMESSAGE, SPNAME, CREATEDON)
      VALUES (ERR_CODE, ERR_MSG,'ADD_EDIT_REPORT',SYSDATE);
      COMMIT;
END ADD_EDIT_REPORT;

/
--------------------------------------------------------
--  DDL for Procedure ADD_PROJECT_MAPPING
--------------------------------------------------------
set define off;

  CREATE OR REPLACE  PROCEDURE "APPUSER"."ADD_PROJECT_MAPPING" 
(
    P_PFID IN NUMBER,
    P_PROJECTID IN NUMBER,
    P_ISPROJECTADMIN IN NUMBER,
    P_CREATEDBY IN NUMBER,
    OPERATIONSTATUS OUT INTEGER,
    OPERATIONLOGID OUT INTEGER,
    OPERATIONMESSAGE OUT VARCHAR2
)
AS
ERR_CODE VARCHAR2(500);
ERR_MSG VARCHAR2(4000);
P_STATUS NUMBER :=0;
P_EXISTINGMAPPING NUMBER :=0;
  BEGIN
      SELECT COUNT(ID) INTO P_EXISTINGMAPPING FROM PROJECT_MAPPING 
      WHERE PFINDEXNO = P_PFID AND PROJECTID = P_PROJECTID AND DELETEDON IS NULL;
      
      IF P_EXISTINGMAPPING > 0 THEN
        OPERATIONSTATUS := 2;
        OPERATIONLOGID := P_STATUS;
        OPERATIONMESSAGE:='Project is already assigned to user.';
        
      ELSE
        INSERT INTO PROJECT_MAPPING
        (
          PFINDEXNO, 
          PROJECTID,
          ISPROJECTADMIN,
          CREATEDBY, 
          CREATEDON
        ) 
        VALUES 
        (
          P_PFID,
          P_PROJECTID, 
          P_ISPROJECTADMIN, 
          P_CREATEDBY, 
          SYSDATE
        );
        
        SELECT MAX(ID) INTO P_STATUS FROM PROJECT_MAPPING;
        COMMIT;
        OPERATIONSTATUS := 1;
        OPERATIONLOGID := P_STATUS;
        OPERATIONMESSAGE:='Project Mapping Added Successfully.';
      END IF;
  EXCEPTION 
      WHEN OTHERS THEN
      ROLLBACK;
      ERR_CODE := SQLCODE;
      ERR_MSG := SUBSTR(SQLERRM, 1, 4000);
      INSERT INTO ERRORLOG (ERRORCODE, ERRORMESSAGE, SPNAME, CREATEDON)
      VALUES (ERR_CODE, ERR_MSG,'ADD_PROJECT_MAPPING',SYSDATE);
      COMMIT;
END ADD_PROJECT_MAPPING;

/
--------------------------------------------------------
--  DDL for Procedure ADD_USER
--------------------------------------------------------
set define off;

  CREATE OR REPLACE  PROCEDURE "APPUSER"."ADD_USER" 
(
    P_PFID IN NUMBER,
    P_NAME IN VARCHAR2,
    P_EMAIL IN VARCHAR2,
    P_DESIGNATION IN VARCHAR2,    
    P_CREATEDBY IN NUMBER,
    OPERATIONSTATUS OUT INTEGER,
    OPERATIONLOGID OUT INTEGER,
    OPERATIONMESSAGE OUT VARCHAR2
)
AS
ERR_CODE VARCHAR2(500);
ERR_MSG VARCHAR2(4000);
P_STATUS NUMBER :=0;
P_COUNT NUMBER :=0;
  BEGIN
  
      SELECT COUNT(ID) INTO P_COUNT FROM USER_MASTER WHERE PFINDEXNO = P_PFID AND DELETEDON IS NULL;
      
      IF(P_COUNT > 0) THEN
        OPERATIONSTATUS := 3;
        OPERATIONLOGID := 0;
        OPERATIONMESSAGE:='User already exists.';
      
      ELSE
        INSERT INTO USER_MASTER 
        (
          PFINDEXNO, 
          NAME,
          EMAIL,
          DESIGNATION,
          CREATEDBY, 
          CREATEDON
        ) 
        VALUES 
        (
          P_PFID,
          P_NAME, 
          P_EMAIL, 
          P_DESIGNATION, 
          P_CREATEDBY, 
          SYSDATE
        );
        
        INSERT INTO USER_ROLE
        (
          PFINDEXNO, 
          ROLEID,
          CREATEDBY, 
          CREATEDON
        ) 
        VALUES 
        (
          P_PFID,
          2,
          P_CREATEDBY, 
          SYSDATE
        );
        
        SELECT MAX(ID) INTO P_STATUS FROM USER_MASTER;
        COMMIT;
        OPERATIONSTATUS := 1;
        OPERATIONLOGID := P_STATUS;
        OPERATIONMESSAGE:='User Added Successfully.';
      END IF;
  EXCEPTION 
      WHEN OTHERS THEN
      ROLLBACK;
      ERR_CODE := SQLCODE;
      ERR_MSG := SUBSTR(SQLERRM, 1, 4000);
      INSERT INTO ERRORLOG (ERRORCODE, ERRORMESSAGE, SPNAME, CREATEDON)
      VALUES (ERR_CODE, ERR_MSG,'ADD_USER',SYSDATE);
      COMMIT;
END ADD_USER;

/
--------------------------------------------------------
--  DDL for Procedure ASSIGN_UNASSIGN_REPORT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE  PROCEDURE "APPUSER"."ASSIGN_UNASSIGN_REPORT" 
(
    P_PFID IN NUMBER,
    P_REPORTID IN NUMBER,
    P_CREATEDBY IN NUMBER,
    OPERATIONSTATUS OUT INTEGER,
    OPERATIONLOGID OUT INTEGER,
    OPERATIONMESSAGE OUT VARCHAR2
)
AS
ERR_CODE VARCHAR2(500);
ERR_MSG VARCHAR2(4000);
P_STATUS NUMBER :=0;
P_EXISTINGMAPPING NUMBER :=0;
  BEGIN
      SELECT COUNT(ID) INTO P_EXISTINGMAPPING FROM REPORT_MAPPING WHERE PFINDEXNO = P_PFID AND REPORTID = P_REPORTID;
      
      IF P_EXISTINGMAPPING > 0 THEN
        DELETE FROM REPORT_MAPPING WHERE PFINDEXNO = P_PFID AND REPORTID = P_REPORTID;
        COMMIT;
        OPERATIONSTATUS := 1;
        OPERATIONLOGID := P_STATUS;
        OPERATIONMESSAGE:='Unassigned report successfully.';
        
      ELSE
        INSERT INTO REPORT_MAPPING
        (
          PFINDEXNO, 
          REPORTID,
          CREATEDBY, 
          CREATEDON
        ) 
        VALUES 
        (
          P_PFID,
          P_REPORTID, 
          P_CREATEDBY, 
          SYSDATE
        );
        
        SELECT MAX(ID) INTO P_STATUS FROM PROJECT_MAPPING;
        COMMIT;
        OPERATIONSTATUS := 1;
        OPERATIONLOGID := P_STATUS;
        OPERATIONMESSAGE:='Assigned report successfully';
      END IF;
  EXCEPTION 
      WHEN OTHERS THEN
      ROLLBACK;
      ERR_CODE := SQLCODE;
      ERR_MSG := SUBSTR(SQLERRM, 1, 4000);
      INSERT INTO ERRORLOG (ERRORCODE, ERRORMESSAGE, SPNAME, CREATEDON)
      VALUES (ERR_CODE, ERR_MSG,'ASSIGN_UNASSIGN_REPORT',SYSDATE);
      COMMIT;
END ASSIGN_UNASSIGN_REPORT;

/
--------------------------------------------------------
--  DDL for Procedure DELETE_CONNECTION
--------------------------------------------------------
set define off;

  CREATE OR REPLACE  PROCEDURE "APPUSER"."DELETE_CONNECTION" 
(
    P_ID IN NUMBER,
    P_DELETEDBY IN NUMBER,
    OPERATIONSTATUS OUT INTEGER,
    OPERATIONLOGID OUT INTEGER,
    OPERATIONMESSAGE OUT VARCHAR2
)
AS
ERR_CODE VARCHAR2(500);
ERR_MSG VARCHAR2(4000);
P_REPORTCOUNT NUMBER :=0;
  BEGIN
      SELECT COUNT(ID) INTO P_REPORTCOUNT FROM REPORT_MASTER WHERE CONNECTIONID = P_ID AND DELETEDON IS NULL;
      
        IF P_REPORTCOUNT > 0 THEN
          OPERATIONSTATUS := 3;
          OPERATIONLOGID := P_ID;
          OPERATIONMESSAGE:='Connection is being used in reports.';
        ELSE      
          UPDATE CONNECTION_MASTER SET DELETEDBY=P_DELETEDBY, DELETEDON=SYSDATE WHERE ID= P_ID;
          COMMIT;
          OPERATIONSTATUS := 1;
          OPERATIONLOGID := P_ID;
          OPERATIONMESSAGE:='Connection Deleted Successfully.';
        END IF;
  EXCEPTION 
      WHEN OTHERS THEN
      ROLLBACK;
      ERR_CODE := SQLCODE;
      ERR_MSG := SUBSTR(SQLERRM, 1, 4000);
      INSERT INTO ERRORLOG (ERRORCODE, ERRORMESSAGE, SPNAME, CREATEDON)
      VALUES (ERR_CODE, ERR_MSG,'DELETE_CONNECTION',SYSDATE);
      COMMIT;
END DELETE_CONNECTION;

/
--------------------------------------------------------
--  DDL for Procedure DELETE_PROJECT_MAPPING
--------------------------------------------------------
set define off;

  CREATE OR REPLACE  PROCEDURE "APPUSER"."DELETE_PROJECT_MAPPING" 
(
    P_ID IN NUMBER,
    P_DELETEDBY IN NUMBER,
    OPERATIONSTATUS OUT INTEGER,
    OPERATIONLOGID OUT INTEGER,
    OPERATIONMESSAGE OUT VARCHAR2
)
AS
ERR_CODE VARCHAR2(500);
ERR_MSG VARCHAR2(4000);
P_STATUS NUMBER :=0;
  BEGIN
      UPDATE PROJECT_MAPPING SET DELETEDBY=P_DELETEDBY, DELETEDON=SYSDATE WHERE ID = P_ID;
  COMMIT;
  OPERATIONSTATUS := 1;
  OPERATIONLOGID := P_ID;
  OPERATIONMESSAGE:='Project Mapping Deleted Successfully.';
  EXCEPTION 
      WHEN OTHERS THEN
      ROLLBACK;
      ERR_CODE := SQLCODE;
      ERR_MSG := SUBSTR(SQLERRM, 1, 4000);
      INSERT INTO ERRORLOG (ERRORCODE, ERRORMESSAGE, SPNAME, CREATEDON)
      VALUES (ERR_CODE, ERR_MSG,'DELETE_PROJECT_MAPPING',SYSDATE);
      COMMIT;
END DELETE_PROJECT_MAPPING;

/
--------------------------------------------------------
--  DDL for Procedure DELETE_REPORT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE  PROCEDURE "APPUSER"."DELETE_REPORT" 
(
    P_ID IN NUMBER,
    P_DELETEDBY IN NUMBER,
    OPERATIONSTATUS OUT INTEGER,
    OPERATIONLOGID OUT INTEGER,
    OPERATIONMESSAGE OUT VARCHAR2
)
AS
ERR_CODE VARCHAR2(500);
ERR_MSG VARCHAR2(4000);
P_STATUS NUMBER :=0;
  BEGIN
      UPDATE REPORT_MASTER SET ISACTIVE=0, DELETEDBY=P_DELETEDBY, DELETEDON=SYSDATE WHERE ID= P_ID;
  COMMIT;
  OPERATIONSTATUS := 1;
  OPERATIONLOGID := P_ID;
  OPERATIONMESSAGE:='Report Deleted Successfully.';
  EXCEPTION 
      WHEN OTHERS THEN
      ROLLBACK;
      ERR_CODE := SQLCODE;
      ERR_MSG := SUBSTR(SQLERRM, 1, 4000);
      INSERT INTO ERRORLOG (ERRORCODE, ERRORMESSAGE, SPNAME, CREATEDON)
      VALUES (ERR_CODE, ERR_MSG,'DELETE_REPORT',SYSDATE);
      COMMIT;
END DELETE_REPORT;

/
--------------------------------------------------------
--  DDL for Procedure GET_CONNECTION
--------------------------------------------------------
set define off;

  CREATE OR REPLACE  PROCEDURE "APPUSER"."GET_CONNECTION" 
(
    P_ID IN NUMBER,
    DBCURSOR OUT SYS_REFCURSOR
)
AS
ERR_CODE VARCHAR2(500);
ERR_MSG VARCHAR2(4000);
  BEGIN
    OPEN DBCURSOR FOR
      SELECT ID ,
      CONNECTIONNAME ,
      PROJECTID ,
      SID ,
      IPADDRESS ,
      PORTNUMBER ,
      USERNAME ,
      PASSWORD ,
      CREATEDBY ,
      CREATEDON ,
      MODIFIEDBY ,
      MODIFIEDON ,
      DELETEDBY ,
      DELETEDON  
      FROM CONNECTION_MASTER WHERE ID=P_ID;
  COMMIT;
  EXCEPTION 
      WHEN OTHERS THEN
      ROLLBACK;
      ERR_CODE := SQLCODE;
      ERR_MSG := SUBSTR(SQLERRM, 1, 4000);
      INSERT INTO ERRORLOG (ERRORCODE, ERRORMESSAGE, SPNAME, CREATEDON)
      VALUES (ERR_CODE, ERR_MSG,'GET_CONNECTION',SYSDATE);
      COMMIT;
END GET_CONNECTION;

/
--------------------------------------------------------
--  DDL for Procedure GET_CONNECTIONS_BY_PROJECT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE  PROCEDURE "APPUSER"."GET_CONNECTIONS_BY_PROJECT" 
(
    P_PROJECTID IN NUMBER,
    DBCURSOR OUT SYS_REFCURSOR
)
AS
ERR_CODE VARCHAR2(500);
ERR_MSG VARCHAR2(4000);
  BEGIN
    OPEN DBCURSOR FOR
      SELECT ID ,
      CONNECTIONNAME ,
      PROJECTID ,
      SID ,
      IPADDRESS ,
      PORTNUMBER ,
      USERNAME ,
      PASSWORD
      FROM CONNECTION_MASTER 
      WHERE PROJECTID=P_PROJECTID
      AND DELETEDON IS NULL;
  COMMIT;
  EXCEPTION 
      WHEN OTHERS THEN
      ROLLBACK;
      ERR_CODE := SQLCODE;
      ERR_MSG := SUBSTR(SQLERRM, 1, 4000);
      INSERT INTO ERRORLOG (ERRORCODE, ERRORMESSAGE, SPNAME, CREATEDON)
      VALUES (ERR_CODE, ERR_MSG,'GET_CONNECTIONS_BY_PROJECT',SYSDATE);
      COMMIT;
END GET_CONNECTIONS_BY_PROJECT;

/
--------------------------------------------------------
--  DDL for Procedure GET_PROJECT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE  PROCEDURE "APPUSER"."GET_PROJECT" 
(
    P_ID IN NUMBER,
    DBCURSOR OUT SYS_REFCURSOR
)
AS
ERR_CODE VARCHAR2(500);
ERR_MSG VARCHAR2(4000);
  BEGIN
    OPEN DBCURSOR FOR
      SELECT ID , PROJECTNAME , PROJECTDESCRIPTION , ISACTIVE FROM PROJECT_MASTER WHERE ID=P_ID;
  COMMIT;
  EXCEPTION 
      WHEN OTHERS THEN
      ROLLBACK;
      ERR_CODE := SQLCODE;
      ERR_MSG := SUBSTR(SQLERRM, 1, 4000);
      INSERT INTO ERRORLOG (ERRORCODE, ERRORMESSAGE, SPNAME, CREATEDON)
      VALUES (ERR_CODE, ERR_MSG,'GET_PROJECT',SYSDATE);
      COMMIT;
END GET_PROJECT;

/
--------------------------------------------------------
--  DDL for Procedure GET_PROJECTS_BY_USER
--------------------------------------------------------
set define off;

  CREATE OR REPLACE  PROCEDURE "APPUSER"."GET_PROJECTS_BY_USER" 
(
    P_PFID IN NUMBER,
    DBCURSOR OUT SYS_REFCURSOR
)
AS
ERR_CODE VARCHAR2(500);
ERR_MSG VARCHAR2(4000);
  BEGIN
    OPEN DBCURSOR FOR
      SELECT MP.ID ,
      MP.PFINDEXNO ,
      MP.PROJECTID ,
      MP.ISPROJECTADMIN,
      MS.PROJECTNAME,
      MS.PROJECTDESCRIPTION,
      MS.ISACTIVE
      FROM PROJECT_MAPPING MP
      LEFT JOIN PROJECT_MASTER MS
      ON MP.PROJECTID = MS.ID
      WHERE PFINDEXNO=P_PFID
      AND MS.ISACTIVE = 1
      AND MP.DELETEDON IS NULL
      ORDER BY MP.ISPROJECTADMIN DESC;
  COMMIT;
  EXCEPTION 
      WHEN OTHERS THEN
      ROLLBACK;
      ERR_CODE := SQLCODE;
      ERR_MSG := SUBSTR(SQLERRM, 1, 4000);
      INSERT INTO ERRORLOG (ERRORCODE, ERRORMESSAGE, SPNAME, CREATEDON)
      VALUES (ERR_CODE, ERR_MSG,'GET_PROJECTS_BY_USER',SYSDATE);
      COMMIT;
END GET_PROJECTS_BY_USER;

/
--------------------------------------------------------
--  DDL for Procedure GET_PROJECT_MAP_BY_USER
--------------------------------------------------------
set define off;

  CREATE OR REPLACE  PROCEDURE "APPUSER"."GET_PROJECT_MAP_BY_USER" 
(
    P_PROJECTID IN NUMBER,
    P_PFID IN NUMBER,
    DBCursor OUT SYS_REFCURSOR
)
AS
ERR_CODE VARCHAR2(500);
ERR_MSG VARCHAR2(4000);
  BEGIN
    OPEN DBCursor FOR
      SELECT M.ID , 
      M.PFINDEXNO,
      M.PROJECTID,
      M.ISPROJECTADMIN,
      P.PROJECTNAME,
      P.PROJECTDESCRIPTION
      FROM PROJECT_MASTER P
      INNER JOIN PROJECT_MAPPING M ON M.PROJECTID = P.ID
      WHERE P.ID = P_PROJECTID AND M.PFINDEXNO = P_PFID AND P.DELETEDBY IS NULL;
  COMMIT;
  EXCEPTION 
      WHEN OTHERS THEN
      ROLLBACK;
      ERR_CODE := SQLCODE;
      ERR_MSG := SUBSTR(SQLERRM, 1, 4000);
      INSERT INTO ERRORLOG (ERRORCODE, ERRORMESSAGE, SPNAME, CREATEDON)
      VALUES (ERR_CODE, ERR_MSG,'GET_PROJECT_MAP_BY_USER',SYSDATE);
      COMMIT;
END GET_PROJECT_MAP_BY_USER;

/
--------------------------------------------------------
--  DDL for Procedure GET_REPORT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE  PROCEDURE "APPUSER"."GET_REPORT" 
(
    P_ID IN NUMBER,
    DBCURSOR OUT SYS_REFCURSOR
)
AS
ERR_CODE VARCHAR2(500);
ERR_MSG VARCHAR2(4000);
  BEGIN
    OPEN DBCURSOR FOR
      SELECT R.ID , R.REPORTNAME , R.REPORTDESCRIPTION , R.PROCEDURENAME ,
      R.PROJECTID , P.PROJECTNAME,
      R.CONNECTIONID , C.CONNECTIONNAME, R.ISACTIVE  
      FROM REPORT_MASTER R
      INNER JOIN PROJECT_MASTER P ON P.ID=R.PROJECTID
      INNER JOIN CONNECTION_MASTER C ON C.ID=R.CONNECTIONID 
      WHERE R.ID = P_ID AND R.DELETEDON IS NULL;
  COMMIT;
  EXCEPTION 
      WHEN OTHERS THEN
      ROLLBACK;
      ERR_CODE := SQLCODE;
      ERR_MSG := SUBSTR(SQLERRM, 1, 4000);
      INSERT INTO ERRORLOG (ERRORCODE, ERRORMESSAGE, SPNAME, CREATEDON)
      VALUES (ERR_CODE, ERR_MSG,'GET_REPORT',SYSDATE);
      COMMIT;
END GET_REPORT;

/
--------------------------------------------------------
--  DDL for Procedure GET_REPORTS_BY_PROJECT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE  PROCEDURE "APPUSER"."GET_REPORTS_BY_PROJECT" 
(
    P_PROJECTID IN NUMBER,
    DBCursor OUT SYS_REFCURSOR
)
AS
ERR_CODE VARCHAR2(500);
ERR_MSG VARCHAR2(4000);
  BEGIN
    OPEN DBCursor FOR
      SELECT R.ID , 
      R.REPORTNAME , 
      R.REPORTDESCRIPTION , 
      R.PROCEDURENAME ,
      R.PROJECTID , 
      P.PROJECTNAME,
      R.CONNECTIONID , 
      C.CONNECTIONNAME ,
      R.ISACTIVE
      FROM REPORT_MASTER R
      INNER JOIN PROJECT_MASTER P ON P.ID=R.PROJECTID
      INNER JOIN CONNECTION_MASTER C ON C.ID=R.CONNECTIONID
      WHERE P.ID = P_PROJECTID AND R.DELETEDBY IS NULL;
  COMMIT;
  EXCEPTION 
      WHEN OTHERS THEN
      ROLLBACK;
      ERR_CODE := SQLCODE;
      ERR_MSG := SUBSTR(SQLERRM, 1, 4000);
      INSERT INTO ERRORLOG (ERRORCODE, ERRORMESSAGE, SPNAME, CREATEDON)
      VALUES (ERR_CODE, ERR_MSG,'GET_REPORTS_BY_PROJECT',SYSDATE);
      COMMIT;
END GET_REPORTS_BY_PROJECT;

/
--------------------------------------------------------
--  DDL for Procedure GET_REPORT_MAP_BY_USER
--------------------------------------------------------
set define off;

  CREATE OR REPLACE  PROCEDURE "APPUSER"."GET_REPORT_MAP_BY_USER" 
(
    P_PROJECTID IN NUMBER,
    P_PFID IN NUMBER,
    DBCursor OUT SYS_REFCURSOR
)
AS
ERR_CODE VARCHAR2(500);
ERR_MSG VARCHAR2(4000);
  BEGIN
    OPEN DBCursor FOR
      SELECT R.ID , 
      M.ID MAPPINGID ,
      R.REPORTNAME , 
      R.REPORTDESCRIPTION , 
      R.PROCEDURENAME ,
      R.CONNECTIONID , 
      C.CONNECTIONNAME
      FROM REPORT_MAPPING M
      INNER JOIN REPORT_MASTER R ON M.REPORTID = R.ID
      INNER JOIN CONNECTION_MASTER C ON C.ID = R.CONNECTIONID
      WHERE R.PROJECTID = P_PROJECTID AND M.PFINDEXNO = P_PFID AND R.ISACTIVE = 1 AND R.DELETEDBY IS NULL;
  COMMIT;
  EXCEPTION 
      WHEN OTHERS THEN
      ROLLBACK;
      ERR_CODE := SQLCODE;
      ERR_MSG := SUBSTR(SQLERRM, 1, 4000);
      INSERT INTO ERRORLOG (ERRORCODE, ERRORMESSAGE, SPNAME, CREATEDON)
      VALUES (ERR_CODE, ERR_MSG,'GET_REPORT_MAP_BY_USER',SYSDATE);
      COMMIT;
END GET_REPORT_MAP_BY_USER;

/
--------------------------------------------------------
--  DDL for Procedure GET_USER
--------------------------------------------------------
set define off;

  CREATE OR REPLACE  PROCEDURE "APPUSER"."GET_USER" 
(
    P_PFID IN NUMBER,
    DBCURSOR OUT SYS_REFCURSOR
)
AS
ERR_CODE VARCHAR2(500);
ERR_MSG VARCHAR2(4000);
  BEGIN
    OPEN DBCURSOR FOR
      SELECT UM.ID ,
      UM.PFINDEXNO ,
      UM.NAME ,
      UM.EMAIL ,
      UM.DESIGNATION,
      UR.ROLEID
      FROM USER_MASTER UM
      LEFT JOIN USER_ROLE UR
      ON UM.PFINDEXNO = UR.PFINDEXNO
      WHERE UM.PFINDEXNO = P_PFID AND UM.DELETEDON IS NULL;
  COMMIT;
  EXCEPTION 
      WHEN OTHERS THEN
      ROLLBACK;
      ERR_CODE := SQLCODE;
      ERR_MSG := SUBSTR(SQLERRM, 1, 4000);
      INSERT INTO ERRORLOG (ERRORCODE, ERRORMESSAGE, SPNAME, CREATEDON)
      VALUES (ERR_CODE, ERR_MSG,'GET_USER',SYSDATE);
      COMMIT;
END GET_USER;

/
--------------------------------------------------------
--  DDL for Procedure GET_USERS_BY_PROJECT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE  PROCEDURE "APPUSER"."GET_USERS_BY_PROJECT" 
(
    P_PROJECTID IN NUMBER,
    DBCursor OUT SYS_REFCURSOR
)
AS
err_code varchar2(500);
err_msg varchar2(4000);
  BEGIN
    OPEN DBCursor FOR
      SELECT UM.ID ,
      UM.PFINDEXNO ,
      UM.NAME ,
      UM.EMAIL ,
      UM.DESIGNATION,
      UR.ROLEID,
      PM.ISPROJECTADMIN
      FROM PROJECT_MAPPING PM
      LEFT JOIN USER_MASTER UM ON PM.PFINDEXNO = UM.PFINDEXNO
      LEFT JOIN USER_ROLE UR ON UR.PFINDEXNO = UM.PFINDEXNO
      WHERE PM.PROJECTID = P_PROJECTID AND UR.ROLEID != 1 AND UM.DELETEDON IS NULL;
  COMMIT;
  EXCEPTION 
      WHEN OTHERS THEN
      ROLLBACK;
      err_code := SQLCODE;
      err_msg := SUBSTR(SQLERRM, 1, 4000);
      INSERT INTO ERRORLOG (ERRORCODE, ERRORMESSAGE, SPNAME, CREATEDON)
      VALUES (err_code, err_msg,'GET_USERS_BY_PROJECT',SYSDATE);
      COMMIT;
END GET_USERS_BY_PROJECT;

/
--------------------------------------------------------
--  DDL for Procedure GET_USER_ROLE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE  PROCEDURE "APPUSER"."GET_USER_ROLE" 
(
    P_PFID IN NUMBER,
    DBCursor OUT SYS_REFCURSOR
)
AS
err_code varchar2(500);
err_msg varchar2(4000);
  BEGIN
    OPEN DBCursor FOR
      SELECT R.ID,
      R.PFINDEXNO,
      U.NAME,
      R.ROLEID
      FROM USER_ROLE R
      LEFT JOIN USER_MASTER U ON U.PFINDEXNO = R.PFINDEXNO
      WHERE R.PFINDEXNO = P_PFID
      AND R.DELETEDON IS NULL
    ;
  COMMIT;
  EXCEPTION 
      WHEN OTHERS THEN
      ROLLBACK;
      err_code := SQLCODE;
      err_msg := SUBSTR(SQLERRM, 1, 4000);
      INSERT INTO ERRORLOG (ERRORCODE, ERRORMESSAGE, SPNAME, CREATEDON)
      VALUES (err_code, err_msg,'GET_USER_ROLE',SYSDATE);
      COMMIT;
END GET_USER_ROLE;

/
--------------------------------------------------------
--  DDL for Procedure SEL_ALL_CONNECTIONS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE  PROCEDURE "APPUSER"."SEL_ALL_CONNECTIONS" 
(
    DBCursor OUT SYS_REFCURSOR
)
AS
err_code varchar2(500);
err_msg varchar2(4000);
  BEGIN
    OPEN DBCursor FOR
      SELECT CM.ID,
      CM.CONNECTIONNAME ,
      CM.PROJECTID ,
      CM.SID ,
      CM.IPADDRESS ,
      CM.PORTNUMBER ,
      CM.USERNAME ,
      CM.PASSWORD,
      PM.PROJECTNAME
      FROM CONNECTION_MASTER CM
      LEFT JOIN PROJECT_MASTER PM
      ON CM.PROJECTID = PM.ID
      WHERE CM.DELETEDON IS NULL
      AND PM.DELETEDON IS NULL
      AND PM.ISACTIVE = 1;
  COMMIT;
  EXCEPTION 
      WHEN OTHERS THEN
      ROLLBACK;
      err_code := SQLCODE;
      err_msg := SUBSTR(SQLERRM, 1, 4000);
      INSERT INTO ERRORLOG (ERRORCODE, ERRORMESSAGE, SPNAME, CREATEDON)
      VALUES (err_code, err_msg,'SEL_ALL_CONNECTIONS',SYSDATE);
      COMMIT;
END SEL_ALL_CONNECTIONS;

/
--------------------------------------------------------
--  DDL for Procedure SEL_ALL_PROJECT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE  PROCEDURE "APPUSER"."SEL_ALL_PROJECT" 
(
    DBCursor OUT SYS_REFCURSOR
)
AS
err_code varchar2(500);
err_msg varchar2(4000);
  BEGIN
    OPEN DBCursor FOR
      SELECT ID , PROJECTNAME , PROJECTDESCRIPTION, ISACTIVE FROM PROJECT_MASTER WHERE DELETEDON IS NULL;
  COMMIT;
  EXCEPTION 
      WHEN OTHERS THEN
      ROLLBACK;
      err_code := SQLCODE;
      err_msg := SUBSTR(SQLERRM, 1, 4000);
      INSERT INTO ERRORLOG (ERRORCODE, ERRORMESSAGE, SPNAME, CREATEDON)
      VALUES (err_code, err_msg,'SEL_ALL_PROJECT',SYSDATE);
      COMMIT;
END SEL_ALL_PROJECT;

/
--------------------------------------------------------
--  DDL for Procedure SEL_ALL_PROJECT_MAPPING
--------------------------------------------------------
set define off;

  CREATE OR REPLACE  PROCEDURE "APPUSER"."SEL_ALL_PROJECT_MAPPING" 
(
    DBCursor OUT SYS_REFCURSOR
)
AS
err_code varchar2(500);
err_msg varchar2(4000);
  BEGIN
    OPEN DBCursor FOR      
      SELECT MP.ID ,
      MP.PFINDEXNO ,
      MP.PROJECTID ,
      MP.ISPROJECTADMIN,
      MS.PROJECTNAME,
      MS.PROJECTDESCRIPTION
      FROM PROJECT_MAPPING MP
      LEFT JOIN PROJECT_MASTER MS
      ON MP.PROJECTID = MS.ID
      AND MP.DELETEDON IS NULL;
  COMMIT;
  EXCEPTION 
      WHEN OTHERS THEN
      ROLLBACK;
      err_code := SQLCODE;
      err_msg := SUBSTR(SQLERRM, 1, 4000);
      INSERT INTO ERRORLOG (ERRORCODE, ERRORMESSAGE, SPNAME, CREATEDON)
      VALUES (err_code, err_msg,'SEL_ALL_PROJECT_MAPPING',SYSDATE);
      COMMIT;
END SEL_ALL_PROJECT_MAPPING;

/
--------------------------------------------------------
--  DDL for Procedure SEL_ALL_REPORT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE  PROCEDURE "APPUSER"."SEL_ALL_REPORT" 
(
    DBCursor OUT SYS_REFCURSOR
)
AS
ERR_CODE VARCHAR2(500);
ERR_MSG VARCHAR2(4000);
  BEGIN
    OPEN DBCursor FOR
      SELECT R.ID , R.REPORTNAME , R.REPORTDESCRIPTION , R.PROCEDURENAME ,
      R.PROJECTID , P.PROJECTNAME,
      R.CONNECTIONID , C.CONNECTIONNAME, R.ISACTIVE  
      FROM REPORT_MASTER R
      INNER JOIN PROJECT_MASTER P ON P.ID=R.PROJECTID
      INNER JOIN CONNECTION_MASTER C ON C.ID=R.CONNECTIONID
      WHERE R.DELETEDBY IS NULL;
  COMMIT;
  EXCEPTION 
      WHEN OTHERS THEN
      ROLLBACK;
      ERR_CODE := SQLCODE;
      ERR_MSG := SUBSTR(SQLERRM, 1, 4000);
      INSERT INTO ERRORLOG (ERRORCODE, ERRORMESSAGE, SPNAME, CREATEDON)
      VALUES (ERR_CODE, ERR_MSG,'SEL_ALL_REPORT',SYSDATE);
      COMMIT;
END SEL_ALL_REPORT;

/
--------------------------------------------------------
--  DDL for Procedure SEL_ALL_USERS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE  PROCEDURE "APPUSER"."SEL_ALL_USERS" 
(
    DBCursor OUT SYS_REFCURSOR
)
AS
err_code varchar2(500);
err_msg varchar2(4000);
  BEGIN
    OPEN DBCursor FOR
      SELECT UM.ID ,
      UM.PFINDEXNO ,
      UM.NAME ,
      UM.EMAIL ,
      UM.DESIGNATION,
      UR.ROLEID
      FROM USER_MASTER UM
      LEFT JOIN USER_ROLE UR
      ON UM.PFINDEXNO = UR.PFINDEXNO
      WHERE UR.ROLEID != 1 AND UM.DELETEDON IS NULL;
  COMMIT;
  EXCEPTION 
      WHEN OTHERS THEN
      ROLLBACK;
      err_code := SQLCODE;
      err_msg := SUBSTR(SQLERRM, 1, 4000);
      INSERT INTO ERRORLOG (ERRORCODE, ERRORMESSAGE, SPNAME, CREATEDON)
      VALUES (err_code, err_msg,'SEL_ALL_USERS',SYSDATE);
      COMMIT;
END SEL_ALL_USERS;

/
--------------------------------------------------------
--  DDL for Procedure UPDATE_PROJECT_MAPPING_ISADMIN
--------------------------------------------------------
set define off;

  CREATE OR REPLACE  PROCEDURE "APPUSER"."UPDATE_PROJECT_MAPPING_ISADMIN" 
(
    P_ID IN NUMBER,
    P_MODIFIEDBY IN NUMBER,
    OPERATIONSTATUS OUT INTEGER,
    OPERATIONLOGID OUT INTEGER,
    OPERATIONMESSAGE OUT VARCHAR2
)
AS
ERR_CODE VARCHAR2(500);
ERR_MSG VARCHAR2(4000);
P_STATUS NUMBER :=0;
  BEGIN
    SELECT ISPROJECTADMIN INTO P_STATUS FROM PROJECT_MAPPING WHERE ID=P_ID;
    
    IF(P_STATUS=0) THEN 
      UPDATE PROJECT_MAPPING SET ISPROJECTADMIN=1, MODIFIEDBY=P_MODIFIEDBY, MODIFIEDON=SYSDATE WHERE ID= P_ID AND DELETEDON IS NULL;
      OPERATIONMESSAGE:='Granted Admin right successfully.';
    ELSE
      UPDATE PROJECT_MAPPING SET ISPROJECTADMIN=0, MODIFIEDBY=P_MODIFIEDBY, MODIFIEDON=SYSDATE WHERE ID= P_ID AND DELETEDON IS NULL;
      OPERATIONMESSAGE:='Revoked Admin right successfully.';     
    END IF;
  COMMIT;
  OPERATIONSTATUS := 1;
  OPERATIONLOGID := P_ID;
  EXCEPTION 
      WHEN OTHERS THEN
      ROLLBACK;
      ERR_CODE := SQLCODE;
      ERR_MSG := SUBSTR(SQLERRM, 1, 4000);
      INSERT INTO ERRORLOG (ERRORCODE, ERRORMESSAGE, SPNAME, CREATEDON)
      VALUES (ERR_CODE, ERR_MSG,'UPDATE_PROJECT_MAPPING_ISADMIN',SYSDATE);
      COMMIT;
END UPDATE_PROJECT_MAPPING_ISADMIN;

/
--------------------------------------------------------
--  DDL for Procedure UPDATE_PROJECT_STATUS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE  PROCEDURE "APPUSER"."UPDATE_PROJECT_STATUS" 
(
    P_ID IN NUMBER,
    P_MODIFIEDBY IN NUMBER,
    OPERATIONSTATUS OUT INTEGER,
    OPERATIONLOGID OUT INTEGER,
    OPERATIONMESSAGE OUT VARCHAR2
)
AS
ERR_CODE VARCHAR2(500);
ERR_MSG VARCHAR2(4000);
P_STATUS NUMBER :=0;
  BEGIN
    SELECT ISACTIVE INTO P_STATUS FROM PROJECT_MASTER WHERE ID=P_ID;
    
    IF(P_STATUS=0) THEN 
      UPDATE PROJECT_MASTER SET ISACTIVE=1, MODIFIEDBY=P_MODIFIEDBY, MODIFIEDON=SYSDATE WHERE ID= P_ID;
      OPERATIONMESSAGE:='Project Activated Successfully.';
    ELSE
      UPDATE PROJECT_MASTER SET ISACTIVE=0, MODIFIEDBY=P_MODIFIEDBY, MODIFIEDON=SYSDATE WHERE ID= P_ID;
      OPERATIONMESSAGE:='Project Deactivated Successfully.';
    END IF;
  COMMIT;
  OPERATIONSTATUS := 1;
  OPERATIONLOGID := P_ID;
  EXCEPTION 
      WHEN OTHERS THEN
      ROLLBACK;
      ERR_CODE := SQLCODE;
      ERR_MSG := SUBSTR(SQLERRM, 1, 4000);
      INSERT INTO ERRORLOG (ERRORCODE, ERRORMESSAGE, SPNAME, CREATEDON)
      VALUES (ERR_CODE, ERR_MSG,'UPDATE_PROJECT_STATUS',SYSDATE);
      COMMIT;
END UPDATE_PROJECT_STATUS;

/
--------------------------------------------------------
--  DDL for Procedure UPDATE_REPORT_STATUS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE  PROCEDURE "APPUSER"."UPDATE_REPORT_STATUS" 
(
    P_ID IN NUMBER,
    P_MODIFIEDBY IN NUMBER,
    OPERATIONSTATUS OUT INTEGER,
    OPERATIONLOGID OUT INTEGER,
    OPERATIONMESSAGE OUT VARCHAR2
)
AS
ERR_CODE VARCHAR2(500);
ERR_MSG VARCHAR2(4000);
P_STATUS NUMBER :=0;
  BEGIN
    SELECT ISACTIVE INTO P_STATUS FROM REPORT_MASTER WHERE ID=P_ID;
    
    IF(P_STATUS=0) THEN 
      UPDATE REPORT_MASTER SET ISACTIVE=1, MODIFIEDBY=P_MODIFIEDBY, MODIFIEDON=SYSDATE WHERE ID= P_ID;
      OPERATIONMESSAGE:='Report Activated Successfully.';
    ELSE
      UPDATE REPORT_MASTER SET ISACTIVE=0, MODIFIEDBY=P_MODIFIEDBY, MODIFIEDON=SYSDATE WHERE ID= P_ID;
      OPERATIONMESSAGE:='Report Deactivated Successfully.';
    END IF;
  COMMIT;
  OPERATIONSTATUS := 1;
  OPERATIONLOGID := P_ID;
  EXCEPTION 
      WHEN OTHERS THEN
      ROLLBACK;
      ERR_CODE := SQLCODE;
      ERR_MSG := SUBSTR(SQLERRM, 1, 4000);
      INSERT INTO ERRORLOG (ERRORCODE, ERRORMESSAGE, SPNAME, CREATEDON)
      VALUES (ERR_CODE, ERR_MSG,'UPDATE_REPORT_STATUS',SYSDATE);
      COMMIT;
END UPDATE_REPORT_STATUS;

/
